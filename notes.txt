RBi -> dep() wid() 

ICICIC -> dep(){}  wid(){}

HDFC --> dep(){}  wid(){}


JPA --> java persistence api
	save() - insert 
	delete() - delete 
	

struts --> spring -->
2001 HB-> EJB 
hibernate --> 
sql ?  


java -> db -> yes -> hibernate-pg 


db => hibernate => 
fast performance 
db independent 
db -> mysql -> [query ] 
      pq ->    [modify? ]


ORM ->  Object Relational Mapping
	class-object == table == mapping 

	class	=== 	table
	object  === 	record
	variable === 	field 
	
class User{
	int userId;
	String firstName;
	String email;
	String password;
}

hibernate --> xml 
hibernate --> annotation 

select * from users 

select * from users where active = true ;

--------------------------------------------------------------------------------
internal --> interface / class 




maven -> core-> 

to provide db configuration -> we have to create hibernate-config.xml 
to map  your class with table --> we have to create hibernate mapping file --> hbm file 

input 
??
server --> session ? 

login --> email password --> session --> set --> islogin = true role = customer 


jsp getmapping url 


expense 
	filter 
	session islogin true 
	role = customer 
	
class 
web.xml 
annotation -> @WebFilter 

@Controller
@Repository
@Service 
@Component 



@Component 
@WebFilter
class LoginCheckFilter{


}

---------------hibernate-config.xml ---------------

dtd xsd -> validate .xml 


dialect --> class --> native  ->
		save() --> insert --> pg ? 
		save()--> insert --> mysql / oracle ? 
			
	

hbm2ddl.auto  -> hibernate table =>update 

------------------------------------------------------------

login --> email password -submit 

controller 
	credentials 
		session user / islogin = true 


filter -- >request 
		session islogin = true => yes 
				access
				no --> login

doFilter(ServletRequest request,ServletResponse,FilterChain chain){
	//signup login --> url access --> without login 
	HttpServletRequest req = (HttpServletRequest)(request);
	HttpSession session = req.getSession();
 	if(session.getAttribute("user") == null){
		rd.forward("Login.jsp");
	}else{
		chaing.doFilter(request,response);
	}

}

------------------------------------------------------------



1 to many 

	user 
	userid	firstname	
	1		ram 		
	
	vehicle
	vid		regno			userid	#type
	1		gj10hg6758		1		 
	2		gj12hg5263 		1		 


------------------------------------------------------------

	user
	userid	fn 		  ln
	1	   ram bhai   patel shah 
	
	
	
	product 
	productid 	pname 
	1			iphone
	2			laptop
	
	
	cart  
	cartid   userid		productid	qty	
	1			10			1
	2			10			2
	
	user
	userid		fn			nationality		religions
	1			tejas		indian			hindu/jain
	2			ram							hindu/bhaman 
	
	
	user
	userid
		1		saurabh
		2		mittal 
		
		
	order 
	orderid
	1
	2
	
-------------------------------------------------------------------------

student 
	sid	sname		
	1	sam		
	2	sau
	3	ram 
	
course 
	cid cname fees 	
	1	c		2	
	2	c++		3	
	3	java	5	
	4	ai 		6 
	
many to many 

student_course
	 
	
-------------------------------------------------------------------------
	
flipkart sales n number of product , product belongs to more than 1 category. 
user can buy n number of product. 


user 

product
productid		productname	price 
1				iphone 			12
2				laptop			23

category 
cateid	catename
1		phone
2		laptop
3		accessories 
4		electronics 
5		laptop_accessories 
6		office_hardware  

order 


product_category 
pid		catid
2		2
2		4
2	


	 
-----------------------------------------------
product 
pid		pname		price 

category 
catid		catname 


[m:m] 
product_category 
product_category_id		productid 	catid 


category -> product 
product --> category
















